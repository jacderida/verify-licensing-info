name: verify-licensing-info
description: Verifies the licensing info for the current repository.
inputs:
  company-name:
    description: >
      The name of the company that should appear in the license file and copyright notices.
    required: true

runs:
  using: composite
  steps:
    - name: setup cargo
      uses: actions-rs/toolchain@v1
      id: toolchain
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: install ripgrep
      shell: bash
      run: cargo install ripgrep
    - name: build licensee
      shell: bash
      run: |
        git clone https://github.com/jacderida/licensee
        cd licensee
        git checkout add-user-to-docker
        docker build . --tag licensee
    - name: verify expected license files
      shell: bash
      run: |
        readarray -t matched_files < <(docker run --rm --volume \
          `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq -r '.matched_files[].filename')
        len="${#matched_files[@]}"
        echo "Licensee detected $len files with license references:"
        echo "${matched_files[@]}"
        if [[ $len -lt 2 ]]; then
          echo "This repository is either missing a LICENSE file, or no license is declared in the README."
          echo "Or both."
          exit 1
        elif [[ $len -gt 3 ]]; then
          echo "Licensee detected more than three licenses."
          echo "To keep things clean, please modify the repository to:"
          echo "* Use one license in a LICENSE file at the root."
          echo "* Make a reference to the license in the README."
          echo "* If this is a Cargo repository, add a license to the Cargo manifest."
          exit 1
        fi

        if [[ ! " ${matched_files[*]} " =~ "LICENSE" ]]; then
          echo "Licensee did not detect a valid license in the LICENSE file"
          exit 1
        fi
        if [[ ! " ${matched_files[*]} " =~ "README" ]]; then
          echo "Licensee did not detect a valid license in the README file"
          exit 1
        fi
    - name: verify license details
      env:
        COMPANY_NAME: ${{ inputs.company-name }}
      shell: bash
      run: |
        readarray -t matched_licenses < <(docker run --rm --volume \
          `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq -r '.matched_files[].matched_license')
        echo "Licensee detected the following license references:"
        echo "${matched_licenses[@]}"

        license_file_license=$( \
          docker run --rm --volume `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq '.matched_files[] | select(.filename=="LICENSE")' | jq -r .matched_license)
        readme_file_license=$( \
          docker run --rm --volume `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq '.matched_files[] | select(.filename=="README.md")' | jq -r .matched_license)

        if [[ "${readme_file_license}" != "${license_file_license}" ]]; then
          echo "The README has a reference to the ${readme_file_license} license."
          echo "This differs from license in the LICENSE file, which is ${license_file_license}."
          exit 1
        fi

        # The license file attribution isn't picked up for a GPL3 license, so we can only do this
        # check for BSD-3-Clause. Not sure about how it will work for other license types. At the
        # moment, we're only using these two.
        if [[ "$license_file_license" == "BSD-3-Clause" ]]; then
          attribution=$( \
            docker run --rm --volume `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
            jq '.matched_files[] | select(.filename=="LICENSE")' | jq -r .attribution)
          echo "Licensee detected attribution in LICENSE file: $attribution"
          if [[ ! $attribution == *"$COMPANY_NAME"* ]]; then
            echo "The attribtion does not contain the expected company name $COMPANY_NAME"
            exit 1
          fi
        fi
    - name: verify source files
      env:
        COMPANY_NAME: ${{ inputs.company-name }}
      shell: bash
      run: |
        exit_code=0
        attribution=$( \
          docker run --rm --volume `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq '.matched_files[] | select(.filename=="LICENSE")' | jq -r .attribution)
        readarray -t matched_licenses < <(docker run --rm --volume \
          `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq -r '.matched_files[].matched_license')
        echo "Detected attribution in LICENSE file: ${attribution}"

        # If a GPL3 license is being used, it won't have an attribution, in which case, we can check
        # the one that it advises the use of (this is defined in the text of the GPL3 license).
        # The licensee tool can also return the text 'null' for the attribution, so check this too.
        year=$(date +%-Y)
        if [[ -z "$attribution" ]] || [[ "$attribution" == "null" ]]; then
          attribution="Copyright (C) ${year} ${COMPANY_NAME}."
          echo "The LICENSE file does not contain an attribution."
          echo "We will assume we're working with a GPL3 license."
        fi

        # The use of `--fixed-string` here and below is to tell rg not to use regexes. This is
        # because the parentheses in the attribution will cause rg to think we're trying to group
        # something in a regex; using `--fixed-string` just gives us a simple contains-based search
        # for the attribution.
        echo "Searching source files for copyright notice '$attribution'"
        readarray -t files_missing_copyright_notice < <( \
          rg --type rust --files-without-match --fixed-strings "$attribution" .)
        if [[ ${#files_missing_copyright_notice[@]} -gt 0 ]]; then
          echo "The following files were found to be missing a copyright notice:"
          for file in ${files_missing_copyright_notice[@]}; do
            echo "$file"
          done
          ((exit_code++))
        else
          echo "All source files contain a copyright notice."
        fi

        echo "Searching source files for license reference '${matched_licenses[0]}'"
        readarray -t files_missing_license_ref < <( \
          rg --type rust --files-without-match --fixed-strings "${matched_licenses[0]}" .)
        if [[ ${#files_missing_license_ref[@]} -gt 0 ]]; then
          echo "The following files were missing a license reference:"
          for file in ${files_missing_license_ref[@]}; do
            echo "$file"
          done
          ((exit_code++))
        else
          echo "All source files contain a license reference."
        fi

        exit $exit_code
    - name: verify cargo manifest
      env:
        COMPANY_NAME: ${{ inputs.company-name }}
      shell: bash
      run: |
        find ../.. -name "check-cargo-manifest.py" -exec cp '{}' . \;
        readarray -t matched_licenses < <(docker run --rm --volume \
          `pwd`:/usr/src/target licensee detect /usr/src/target --json | \
          jq -r '.matched_files[].matched_license')
        pip install toml
        ./check-cargo-manifest.py "${matched_licenses[0]}" "Cargo.toml"

branding:
  icon: 'globe'
  color: 'blue'
